(def s "3-598-21508-8")
s
(re-find #"\d+" s)
(re-find #"\d+-\d+" s)
(re-find #"[0-9]-[0-9]" s)
(re-find #"\d{3}-[0-9]" s)
(re-find #"\d{1}-d{3}-d{5}-" s)
s
(re-find #"\d{1}-d{3}" s)
(re-find #"\d-d{3}" s)
(re-find #"\d+-d{3}" s)
(re-find #"\d{1}-\d{3}" s)
(re-find #"\d{1}-\d{3}-\d{5}-" s)
(re-find #"\d{1}-\d{3}-\d{5}-" "2323-22-232")
(re-find #"\d{1}-\d{3}-\d{5}-" "2-22-232")
(re-find #"\d{1}-\d{3}-\d{5}-" "2-223-")
(re-find #"\d{1}-\d{3}-\d{5}-" s)
(re-seq #"\d{1}-\d{3}-\d{5}-" s)
(re-find #"\d{1}-\d{3}-\d{5}-" s)
s
(clojure.string/split s ",")
(clojure.string/split s)
s
(clojure.string/split s #"-")
(let [[a,b,c,d] (clojure.string/split s #"-")] c)
(clojure.string/split s #"-")
(map seq (clojure.string/split s #"-"))
(mapcat seq (clojure.string/split s #"-"))
(def p (mapcat seq (clojure.string/split s #"-")))
p
(map int p)
(map #(- (int %) 48) p)
(def t (map #(- (int %) 48) p))
t
(map (fn [x y] (* x y)) t (range 1 10))
(map (fn [x y] (* x y)) t (range 1 9))
(map (fn [x y] (* x y)) t (range 10 2))
(map (fn [x y] (* x y)) t (range 10 2 -1))
(map (fn [x y] (* x y)) t (range 10 1 -1))
(apply + (map (fn [x y] (* x y)) t (range 10 1 -1)) +8)
(apply + (map (fn [x y] (* x y)) t (range 10 1 -1)) 8)
(apply + (map (fn [x y] (* x y)) t (range 10 1 -1)))
(apply + (map (fn [x y] (* x y)) t (range 10 1 -1)) 2)
(apply + (map (fn [x y] (* x y)) t (range 10 1 -1)))
(apply + (map (fn [x y] (* x y)) t (range 10 1 -1)) [8])
(apply + (map (fn [x y] (* x y)) t (range 10 1 -1)))
(mod 264 11)
(re-find #"\d{1}-\d{3}-\d{5}-" s)
(def x "3-598-21508-X")
(re-find #"\d{1}-\d{3}-\d{5}-" x)
(re-find #"\d{1}-\d{3}-\d{5}-[0-9 | X] x)
(re-find #"\d{1}-\d{3}-\d{5}-[0 | X] x)
(re-find #"\d{1}-\d{3}-\d{5}-[0|X] x)
(re-find #"\d{1}-\d{3}-\d{5}-0|X x)
(re-find #"\d{1}-\d{3}-\d{5}-0|X" x)
(re-find #"\d{1}-\d{3}-\d{5}-[0|X]" x)
x
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" x)
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-215-8-Y")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-215-8-1")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-215-8-2")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-215-8-3")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-215-8-4")
(re-find #"\d{1}-\d{3}-\d{5}-[2|X]" "3-598-215-8-4")
(re-find #"\d{1}-\d{3}-\d{5}-[2|X]" "3-598-215-8-2")
(re-find #"\d{1}-\d{3}-\d{5}-[2|X]" "3-598-215-2")
(re-find #"\d{1}-\d{3}-\d{5}-[2|X]" "3-598-21508-2")
(re-find #"\d{1}-\d{3}-\d{5}-[2|X]" "3-598-21508-X")
(re-find #"\d{1}-\d{3}-\d{5}-[2|X]" "3-598-21508-2")
(re-find #"\d{1}-\d{3}-\d{5}-[2|X]" "3-598-21508-3")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-3")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-2")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-X")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-Y")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-1")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-0")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508--1")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-1")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-9")
(if (re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "3-598-21508-9") 1 0)
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(- (int %) 48))
  )
)
(require '[clojure.string :as str])
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(- (int %) 48))
  )
)
s
(isbn? (require '[clojure.string :as str])
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(- (int %) 48))
  )
)
(isbn? s)
(range 10 2)
(range 9 2)
(range 9 2 -1)
(range 9 1 -1)
(range 10 1 -1)
(mapcat * (range 10 1 -1) (range 10 1 -1))
(map * (range 10 1 -1) (range 10 1 -1))
(require '[clojure.string :as str])
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(- (int %) 48))
       (map * (range 10 1 -1))
  )
)
(isbn? s)
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(- (int %) 48))
       (map * (range 10 1 -1))
       (apply +)
       
  )
)
(isbn? s)
s
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(- (int %) 48))
       (map * (range 11 1 -1))
       (apply +))
)
(isbn? s)
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(- (int %) 48))
       (map * (range 10 0 -1))
       (apply +))
)
(isbn? s)
(cond-> "X" (= "X" "X") 
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(if (= % "X") 10 (- (int %) 48)) 
       (map * (range 10 0 -1))
       (apply +))
))
(isbn? s)
s
(require '[clojure.string :as str])
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(if (= % "X") 10 (- (int %) 48)))
       (map * (range 10 0 -1))
       (apply +))
)
(isbn? s)
s
(isbn? "3-598-21508-8")
(isbn? "3-598-21508-X")
(isbn? "3-598-21508-Y")
s
(isbn? "3-598-21508-7")
 (map * (range 10 0 -1))
       (apply +)
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(if (= % "X") 10 (- (int %) 48)))
      )
)
(isbn? s)
(map * (range 10 1 -1) (isbn? s))
(map (range 10 1 -1) (isbn? s))
(map identity (range 10 1 -1) (isbn? s))
(map vec (range 10 1 -1) (isbn? s))
(map * (range 10 1 -1) (isbn? s))
(range 10 1 -1)
(isbn? s)
(isbn? "3-598-21508-Y")
(isbn? "3-598-21508-X")
\X
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(if (= % \X) 10 (- (int %) 48)))
      )
)
(isbn? "3-598-21508-X")
(int "X")
(int "30)
(int "30")
(int \4)
(int \X)
s
(str/split s #"-")
(mapcat seq (str/split s #"-"))
(mapcat seq (str/split "3-598-21508-X" #"-"))
(map #(if (= % "X") 10 (- (int %) 48)) (map #(if (= % "X") 10 (- (int %) 48))
(def r (mapcatseq (str/split "3-598-21508-X" #"-"))
(def r (mapcat seq (str/split "3-598-21508-X" #"-")))
r
(map #(if (= % "X") 10 (- (int %) 48)) r)
(map #(if (= % \X) 10 (- (int %) 48)) r)
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(if (= % \X) 10 (- (int %) 48)))
       
))
(isbn? s)
s
(isbn? "3-598-21508-X")
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split isbn #"-")
       (mapcat seq)
       (map #(if (= % \X) 10 (- (int %) 48)))
       
))
s
(isbn? "3-598-21508-X")
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
  (->> (str/split isbn #"-")
       (mapcat seq)
       (map #(if (= % \X) 10 (- (int %) 48)))
       (map * (range 10 0 -1))
       (apply +))
)
(isbn? "3-598-21508-X")
(mod 20 11)
(mode 20 11)
(mod 20 11)
(defn get-hash-value [s]
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(if (= % \X) 10 (- (int %) 48)))
       (map * (range 10 0 -1))
       (apply +)
       ))
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
    (if (is-valid? isbn) (= (mod (get-hash-value isbn) 11) 0) false))
s
(isbn? s)
(isbn? "3-598-21508-X")
(defn get-hash-value [s]
  (->> (str/split s #"-")
       (mapcat seq)
       (map #(if (= % \X) 10 (- (int %) 48)))
       (map * (range 10 0 -1))
       (apply +)
       ))
(def is-valid? #(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" %))
(defn isbn? [isbn] ;; <- arglist goes here
  ;; your code goes here
    (if (is-valid? isbn) (= (mod (get-hash-value isbn) 11) 0) false))
(refind #"\d{9}[d+|X]" "359821507X")
(re-find #"\d{9}[d+|X]" "359821507X")
(re-find #"\d{9}[d+|X]" "3598215072X")
(re-find #"\d{9}[d+|X]" "3598215072XX")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "123456789X")
(re-find #"\d{9}[\d+|X]" "123456789X")
(re-find #"\d{9}[\d+|X]" "0123456789X")
(re-find #"^\d{9}[\d+|X]$" "0123456789X")
(re-find #"^\d{9}[\d+|X]$" "123456789X")
(re-find #"^\d{9}[\d+|X]$" "123456789X11")
(re-find #"^\d{9}[\d+|X]$" "123456789XXX")
(re-find #"^\d{9}[\d+|X]$" "123456789X")
(or nil (re-find #"^\d{9}[\d+|X]$" "123456789X"))
(or nil nil)
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "2-232-34325-X")
(re-find #"\d{1}-\d{3}-\d{5}-[\d+|X]" "2-232-34325-XX")
(re-find #"\^d{1}-\d{3}-\d{5}-[\d+|X]$" "2-232-34325-XX")
(re-find #"\^d{1}-\d{3}-\d{5}-[\d+|X]$" "2-232-34325-X")
(re-find #"\^d{1}-\d{3}-\d{5}-[\d+|X]$" "2-232-34325-5")
(re-find #"^\d{1}-\d{3}-\d{5}-[\d+|X]$" "2-232-34325-5")
(re-find #"^\d{1}-\d{3}-\d{5}-[\d+|X]$" "2-232-34325-53")
(re-find #"^\d{1}-\d{3}-\d{5}-[\d+|X]$" "2-232-34325-X")
(re-find #"^\d{1}-\d{3}-\d{5}-[\d+|X]$" "2-232-34325-XXX")
(re-find #"^\d{1}-\d{3}-\d{5}-[\d+|X]$" "2-232-34325-X")
(re-find #"^\d{1}-\d{3}-\d{5}-[\d+|X]$" "222-232-34325-X")
(def s "3-598-2X507-9")
(re-find #"^\d{1}-\d{3}-\d{5}-[\d+|X]$" s)
(def s "3-598-24507-9")
(re-find #"^\d{1}-\d{3}-\d{5}-[\d+|X]$" s)
(seq s)
(clojure.string/replace s "-" "")
  (->> (str/split s #"-")
(Character/digit "3")
(Character/digit \3)
(Character/digit /3)
(Character/digit \3)
(Character/digit /3)
(Character/digit '3')
(Character/digit "4")
(Character/digit "4" 10)
(Character/digit \4 10)
(Character/digit \9 10)
(Character/digit \12 10)
(Character/digit \0 10)
(Character/digit \0 1)
(Character/digit \0 2)
(Character/digit \3 2)
(Character/digit \3 9)
(Character/digit \0 9)
(Character/digit \1 9)
(Character/digit \8 9)
(Character/digit \9 9)
(Character/digit \9 10)
(Character/digit \0 10)
(Character/digit \1 10)
(Character/digit \9 10)
(Character/digit \X 10)
(def valid? #(->> (str/replace % "-" "") (re-find #"^\d{9}[\d+|X]$" )))
(require '[clojure.string :as str])
(def valid? #(->> (str/replace % "-" "") (re-find #"^\d{9}[\d+|X]$" )))
(valid? "3-598-2K507-0")
(and nil true)
(valid "3-598-21507-XX")
(valid? "3-598-21507-XX")
(= (valid? "3-598-21507-XX") true)
(= (valid? "3-598-21507-XX") false)
(some? nil)(
(some? nil)
(some? "asdasd")
(some? nil)
(Character/digit \3 10)
(Character/digit \X 10)
(Character/digit \X 11)
(Character/digit \X 10)
(Character/digit \9 10)
(Character/digit \4 10)
(Character/digit \X 10)
(let s "3-598-21508-9")
(def s "3-598-21508-9")
s
(def s "3-598-21507-X")
(->> (str/replace s "-" "") (re-matches #"^\d{9}[\d+|X]$") some?)
(->> (clojure.string/replace s "-" "") (re-matches #"^\d{9}[\d+|X]$") some?)
(->> (clojure.string/replace s "-" "") (re-matches #"^\d{9}[\d+|X]$"))
(ns isbn-verifier
  (:require [clojure.string :as str]))
  
(defn get-hash-value [s]
  (->> s
       (map #(if (= % \X) 10 (Character/digit % 10)))
       (map * (range 10 0 -1))
       (apply +)))
(defn isbn? [isbn]
  (let [target (->> (str/replace isbn "-" "") (re-matches #"^\d{9}[\d+|X]$"))]
     target))
(isbn? "12321312")
(some? (isbn? "12321312"))
(defn isbn? [isbn]
  (let [target (->> (str/replace isbn "-" "") (re-matches #"^\d{9}[\d+|X]$"))]
    (and (some? target)
         (zero? (mod (get-hash-value target) 11)))))
