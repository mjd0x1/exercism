(def s "one fish two fish red fish blue fish")
s
(frequencies s)
(hash-map s)
s
(split s #(" "))
(clojure.string/split s #(" "))
(clojure.string/split s #" ")
(frequencies (clojure.string/split s #" "))
(def s "javascript!!&@$%^&")
s
(re-matches #"\w" s)
(re-matches #"[a-z]" s)
(re-matches #"[a-z][A-Z]" s)
(re-matches #"[a-zA-Z]" s)
s
(re-matches #"\w" s)
(re-matches #"\w+" s)
s
(re-find #"\w+" s)
(re-find #"\w+" "javascript....")
(re-find #"\w+" "///javascript....")
(clojure.string/split "assadas" #"")
(def s "asdasd as as")
(->> (str/split s #" ")
       (re-find #"\w+"))
(->> (str/split s #" ")
(->> (clojure.string/split s #" ")
       (re-find #"\w+")
(->> (clojure.string/split s #" ")
       (re-find #"\w+"))
(def s "one fish two fish red fish blue fish")
(re-find #"\w+" s)
(re-find #"\w+" (str/split #" " s))
(re-find #"\w+" (str/split s #" "))
(re-find #"\w+" (clojure.string/split s #" "))
(map #(re-find #"\w+" %) (clojure.string/split s #" ")))
(map #(re-find #"\w+" %) (clojure.string/split s #" "))
(def s "car : carpet as java : javascript!!&@$%^&")
s
(clojure.string/split s #" ")
(re-find #"\w+" s)
s
(re-find #"[^A-Za-z0-9]" s)
(re-find #"^[A-Za-z0-9]" s)
(replace s #"[^A-Za-z0-9]" "")
(clojure.string/replace s #"[^A-Za-z0-9]" "")
(clojure.string/replace s #"[^A-Za-z0-9]" " ")
(clojure.string/replace s #"\^w" " ")
(clojure.string/replace s #"\^w+" " ")
(clojure.string/replace s #"[^A-Za-z]" " ")
(clojure.string/replace s #"[^A-Za-z]" "")
(clojure.string/replace s #"[^\w-]" "")
(clojure.string/replace s #"[^\w]" "")
(clojure.string/replace s #"[^\w]" " ")
(clojure.string/replace s #"[^\w]" "")
(clojure.string/replace s #"[^\w]" " ")
(clojure.string/split #" " (clojure.string/replace s #"[^\w]" " "))
(clojure.string/split (clojure.string/replace s #"[^\w]" " ") #" ")
(frequencies (clojure.string/split (clojure.string/replace s #"[^\w]" " ") #" "))
(clojure.string/split (clojure.string/replace s #"[^\w]
(clojure.string/split (clojure.string/replace s #"[^\w]))
(clojure.string/split (clojure.string/replace s #"[^\w]) " ")
(clojure.string/split (clojure.string/replace s #"[^\w]") " ")
(clojure.string/split (clojure.string/replace s #"[^\w]" " ") " ")
(clojure.string/split (clojure.string/replace s #"[^\w]" " ") #" ")
s
(clojure.string/split s #" ")
(map #(re-find #"\w+" %) (clojure.string/split s #" "))
(some? nil)
(keep (map #(re-find #"\w+" %) (clojure.string/split s #" ")))
(map #(re-find #"\w+" %) (clojure.string/split s #" "))
(filter #(!= % nil) (map #(re-find #"\w+" %) (clojure.string/split s #" ")))
(filter #(not  % nil) (map #(re-find #"\w+" %) (clojure.string/split s #" ")))
(filter #(not=  % nil) (map #(re-find #"\w+" %) (clojure.string/split s #" ")))
(clojure.string/lower-case "ASSADSAD")
(clojure.string/lower-case nil)
(def p "one fish two fish red fish blue fish")
p
(re-seq #"\w" p)
(re-seq #"\w+" p)
(def r "car : carpet as java : javascript!!&@$%^&")
(re-seq #"\w+" r)
(frequencies (re-seq #"\w+" r))
